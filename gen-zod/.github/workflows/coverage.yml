name: Test Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  coverage:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x

    - name: Run tests with coverage
      run: deno task test:coverage

    - name: Generate LCOV report
      run: deno task coverage:report

    - name: Extract coverage percentage
      id: coverage
      run: |
        # Extract coverage percentage from LCOV file
        if [ -f coverage.lcov ]; then
          # Calculate coverage percentage from LCOV
          LINES_FOUND=$(grep -c "^LF:" coverage.lcov || echo "0")
          LINES_HIT=$(grep -c "^LH:" coverage.lcov || echo "0")

          if [ "$LINES_FOUND" -gt 0 ]; then
            # Sum all LF and LH values
            TOTAL_LINES=$(grep "^LF:" coverage.lcov | cut -d: -f2 | awk '{sum += $1} END {print sum}')
            HIT_LINES=$(grep "^LH:" coverage.lcov | cut -d: -f2 | awk '{sum += $1} END {print sum}')

            if [ "$TOTAL_LINES" -gt 0 ]; then
              COVERAGE=$(echo "scale=1; $HIT_LINES * 100 / $TOTAL_LINES" | bc)
            else
              COVERAGE="0"
            fi
          else
            COVERAGE="0"
          fi
        else
          COVERAGE="0"
        fi

        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"

    - name: Create coverage badge
      run: |
        COVERAGE="${{ steps.coverage.outputs.coverage }}"

        # Determine badge color based on coverage
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="red"
        fi

        # Create project-specific badge directory
        mkdir -p badges/gen-zod

        # Generate badge SVG using shields.io
        curl -s "https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}" > badges/gen-zod/coverage.svg

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./badges
        destination_dir: badges
        keep_files: true

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage }}';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ“Š Test Coverage Report\n\n**Coverage: ${coverage}%**\n\nGenerated by GitHub Actions`
          });